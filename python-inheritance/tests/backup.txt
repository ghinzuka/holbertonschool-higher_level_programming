testing validator with a float
::
>>> bg.integer_validator("baptiste", 3.14)
Traceback (most recent call last):
TypeError: baptiste must be an integer

testing validator with a dictionnary
::
>>> bg.integer_validator("baptiste", {cestmoi, cestlui})
Traceback (most recent call last):
NameError: name 'cestmoi' is not defined

testing validator with a tulpe
::
>>> bg.integer_validator("baptiste", (0, 1, 2))
Traceback (most recent call last):
TypeError: baptiste must be an integer

testing validator with a none as name and value
::
>>> bg.integer_validator(None, None)
Traceback (most recent call last):
TypeError: None must be an integer

testing validator with 3 arguments
::
>>> bg.integer_validator("baptiste", "encore", "un", "baptiste")
Traceback (most recent call last):
TypeError: BaseGeometry.integer_validator() takes 3 positional arguments but 5 were given

testing validator with no arguments
::
>>> bg.integer_validator()
Traceback (most recent call last):
TypeError: BaseGeometry.integer_validator() missing 2 required positional arguments: 'name' and 'value'

testing with a succed
::
>>> bg.integer_validator("baptiste", 32)

with infinite integer
::
>>> bg.integer_validator("infnumber", int('inf'))
Traceback (most recent call last):
ValueError: invalid literal for int() with base 10: 'inf'