============================
doctest for 0-add_integer.py
============================
``add_integer()`` returns the sum of its arguments

SUCCESSFUL TEST CONDITIONS
==========================

testing addition of two integers, both single digit
::
>>> add_integer = __import__('0-add_integer').add_integer
>>> add_integer(1, 2)
3

test for two float
::
>>> add_integer(1.5, 2.5)
3

test for only A as int leave second to default (98)
::
>>> add_integer(1)
99

test for two 0 as integers
::
>>> add_integer(0, 0)
0

testing 1 float and default value int (98)
::
>>> add_integer(27.1234)
125

TEST WITH INVALID INPUT
=========================

Testing with a as a string and b an integer
::
>>> add_integer("a", 1)
Traceback (most recent call last):
TypeError: a must be an integer

testing with b as a string
::
>>> add_integer(1, "b")
Traceback (most recent call last):
TypeError: b must be an integer

testng with None as A
::
>>> add_integer(None, 1)
Traceback (most recent call last):
TypeError: a must be an integer

testing with b as a list
::
>>> add_integer(1, [2])
Traceback (most recent call last):
TypeError: b must be an integer

testing how add_integer function handles both arguments not of type int or float
::
>>> add_integer("5", "3")
Traceback (most recent call last):
TypeError: a must be an integer

testing how add_integer function handles if 1 argument is boolean
::
>>> add_integer(True, 1)
Traceback (most recent call last):
TypeError: a must be an integer

>>> add_integer(0, float('nan'))
Traceback (most recent call last):
...
ValueError: cannot convert float NaN to integer