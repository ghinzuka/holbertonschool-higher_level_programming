============================
doctest for 2-matrix_divided.py
============================
``matrix_divided()`` returns divided matrix by a number in float or int

>>> matrix_divided = __import__('2-matrix_divided').matrix_divided

SUCCESSFUL TEST CONDITIONS
==========================

testing with a single digit number
::
>>> matrix_divided([[1, 2], [3, 4]], 2)
[[0.5, 1.0], [1.5, 2.0]]

testing with a float numbers in matrix
::
>>> matrix_divided([[1.5, 2.5], [3.5, 4.5]], 2)
[[0.75, 1.25], [1.75, 2.25]]

testing with a three sized matrix
::
>>> matrix_divided([[1, 2, 3], [4, 5, 6]], 3)
[[0.33, 0.67, 1.0], [1.33, 1.67, 2.0]]

testing with a larger number
::
>>> matrix_divided([[1, 2, 3], [7, 8, 9]], 55555)
[[0.0, 0.0, 0.0], [0.0, 0.0, 0.0]]

tsting with a float as a Div 
::
>>> matrix_divided([[1, 2, 3], [7, 8, 9]], 5.5)
[[0.18, 0.36, 0.55], [1.27, 1.45, 1.64]]

testing with a negativ integer
::
>>> matrix_divided([[1, 2, 3], [7, 8, 9]], -5)
[[-0.2, -0.4, -0.6], [-1.4, -1.6, -1.8]]

testing with negativ int in element of row
::
>>> matrix_divided([[1, 2, 3], [-7, -8, -9]], -5)
[[-0.2, -0.4, -0.6], [1.4, 1.6, 1.8]]

testing with more row in the matrix
::
>>> matrix_divided([[1, 2, 3], [5, 6, 4], [7, 8, 9]], -5)
[[-0.2, -0.4, -0.6], [-1.0, -1.2, -0.8], [-1.4, -1.6, -1.8]]

TEST WITH INVALID INPUT
=========================

testing with different size row
::
>>> matrix_divided([[1, 2], [3, 4, 5]], 2)
Traceback (most recent call last):
TypeError: Each row of the matrix must have the same size

testing with a string as a matrix
::
>>> matrix_divided("not a matrix", 2)
Traceback (most recent call last):
TypeError: matrix must be a matrix (list of lists) of integers/floats

testing with a string as an element of a row
::
>>> matrix_divided([[1, 2], [3, "4"]], 2)
Traceback (most recent call last):
TypeError: matrix must be a matrix (list of lists) of integers/floats

testing with a string as the div
::
>>> matrix_divided([[1, 2], [3, 4]], "2")
Traceback (most recent call last):
TypeError: div must be a number

testing with 0 as a Div
::
>>> matrix_divided([[1, 2], [3, 4]], 0)
Traceback (most recent call last):
ZeroDivisionError: division by zero

testing how function handles list of None
::
>>> matrix_divided([None], 2)
Traceback (most recent call last):
TypeError: matrix must be a matrix (list of lists) of integers/floats

testing how function handles None argument
::
>>> matrix_divided(None, None)
Traceback (most recent call last):
TypeError: matrix must be a matrix (list of lists) of integers/floats


