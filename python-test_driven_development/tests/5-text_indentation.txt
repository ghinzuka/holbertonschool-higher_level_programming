============================
doctest for 5-text_indentation.py
============================
``text_indentation()`` prints text with two newlines after '.' '?' or ':'

>>> text_indentation = __import__('5-text_indentation').text_indentation

SUCCESSFUL TEST CONDITIONS
==========================

testing with marker '.' '?' and ':'
::
>>> text_indentation("""Lorem ipsum dolor sit amet, consectetur adipiscing elit. \
... Quonam modo? Utrum igitur tibi litteram videor an totas paginas commovere? \
... Non autem hoc: igitur ne illud quidem. Fortasse id optimum, sed ubi illud: \
... Plus semper voluptatis? Teneo, inquit, finem illi videri nihil dolere. \
... Transfer idem ad modestiam vel temperantiam, quae est moderatio cupiditatum \
... rationi oboediens. Si id dicis, vicimus. Inde sermone vario sex illa a Dipylo \
... stadia confecimus. Sin aliud quid voles, postea. Quae animi affectio suum \
... cuique tribuens atque hanc, quam dico. Utinam quidem dicerent alium alio \
... beatiorem! Iam ruinas videres""")
Lorem ipsum dolor sit amet, consectetur adipiscing elit.
<BLANKLINE>
Quonam modo?
<BLANKLINE>
Utrum igitur tibi litteram videor an totas paginas commovere?
<BLANKLINE>
Non autem hoc:
<BLANKLINE>
igitur ne illud quidem.
<BLANKLINE>
Fortasse id optimum, sed ubi illud:
<BLANKLINE>
Plus semper voluptatis?
<BLANKLINE>
Teneo, inquit, finem illi videri nihil dolere.
<BLANKLINE>
Transfer idem ad modestiam vel temperantiam, quae est moderatio cupiditatum rationi oboediens.
<BLANKLINE>
Si id dicis, vicimus.
<BLANKLINE>
Inde sermone vario sex illa a Dipylo stadia confecimus.
<BLANKLINE>
Sin aliud quid voles, postea.
<BLANKLINE>
Quae animi affectio suum cuique tribuens atque hanc, quam dico.
<BLANKLINE>
Utinam quidem dicerent alium alio beatiorem! Iam ruinas videres

testin with blank space at the start of the text
::
>>> text_indentation("""   Hello:    world?""")
Hello:
<BLANKLINE>
world?
<BLANKLINE>

testint with blank line at the end of text
::
>>> text_indentation("""Hello:    world?    """)
Hello:
<BLANKLINE>
world?
<BLANKLINE>

testing with only special characters
::
>>> text_indentation(""":?.""")
:
<BLANKLINE>
?
<BLANKLINE>
.
<BLANKLINE>

testing with no special character
::
>>> text_indentation("""hello world there is no special character""")
hello world there is no special character

=============
TEST WITH FAILURE
=============

testing None 
::
>>> text_indentation(None)
Traceback (most recent call last):
TypeError: text must be a string

testing too much argument
::
>>> text_indentation("blabla", "blibli", "bloblo")
Traceback (most recent call last):
TypeError: text_indentation() takes 1 positional argument but 3 were given

testing with bolean
::
>>> text_indentation(True)
Traceback (most recent call last):
TypeError: text must be a string

testing a dictionnary
::
>>> text_indentation({1, 2, 3, 4})
Traceback (most recent call last):
TypeError: text must be a string

testing with nothing
::
>>> text_indentation()
Traceback (most recent call last):
TypeError: text_indentation() missing 1 required positional argument: 'text'